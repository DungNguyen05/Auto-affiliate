import sqlite3
import hashlib
from pathlib import Path
from datetime import datetime
import sys

# Add root directory to path
sys.path.append(str(Path(__file__).parent.parent.parent))


class Database:
    """Qu·∫£n l√Ω database SQLite ƒë·ªÉ l∆∞u posts t·ª´ Threads"""
    
    def __init__(self, db_path=None):
        if db_path is None:
            # T·ª± ƒë·ªông x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ª´ root project
            root_dir = Path(__file__).parent.parent.parent
            db_path = root_dir / "data" / "threads_posts.db"
        
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self.conn = None
        self.connect()
        self.init_database()
    
    def connect(self):
        """K·∫øt n·ªëi database, t·∫°o file n·∫øu ch∆∞a c√≥"""
        self.conn = sqlite3.connect(self.db_path)
        print(f"‚úÖ ƒê√£ k·∫øt n·ªëi database: {self.db_path}")
    
    def init_database(self):
        """T·∫°o c√°c b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i"""
        cursor = self.conn.cursor()
        
        # B·∫£ng ch√≠nh: l∆∞u th√¥ng tin b√†i vi·∫øt
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content_hash TEXT UNIQUE NOT NULL,
                content TEXT NOT NULL,
                original_url TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_posted INTEGER DEFAULT 0,
                posted_at TIMESTAMP
            )
        ''')
        
        # B·∫£ng l∆∞u ·∫£nh
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS post_images (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                image_url TEXT NOT NULL,
                local_path TEXT,
                FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
            )
        ''')
        
        # B·∫£ng l∆∞u video
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS post_videos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                video_url TEXT NOT NULL,
                local_path TEXT,
                FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
            )
        ''')
        
        # B·∫£ng l∆∞u link Shopee
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS shopee_links (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                original_link TEXT NOT NULL,
                affiliate_link TEXT,
                FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
            )
        ''')
        
        # T·∫°o index ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô truy v·∫•n
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_content_hash ON posts(content_hash)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_is_posted ON posts(is_posted)')
        
        self.conn.commit()
        print(f"‚úÖ Database schema ƒë√£ s·∫µn s√†ng")
    
    def generate_content_hash(self, content):
        """T·∫°o hash t·ª´ content ƒë·ªÉ ph√°t hi·ªán tr√πng l·∫∑p"""
        normalized = ' '.join(content.lower().strip().split())
        return hashlib.md5(normalized.encode()).hexdigest()
    
    def is_duplicate(self, content):
        """Ki·ªÉm tra b√†i vi·∫øt ƒë√£ t·ªìn t·∫°i ch∆∞a (d·ª±a v√†o content)"""
        content_hash = self.generate_content_hash(content)
        cursor = self.conn.cursor()
        cursor.execute('SELECT id FROM posts WHERE content_hash = ?', (content_hash,))
        return cursor.fetchone() is not None
    
    def save_post(self, content, images=None, videos=None, shopee_links=None, 
                  original_url=None):
        """
        L∆∞u b√†i vi·∫øt m·ªõi v√†o database
        
        Args:
            content: N·ªôi dung b√†i vi·∫øt
            images: List URL ·∫£nh ['url1', 'url2', ...]
            videos: List URL video ['url1', 'url2', ...]
            shopee_links: List link Shopee ['link1', 'link2', ...]
            original_url: URL g·ªëc c·ªßa b√†i vi·∫øt
        
        Returns:
            post_id n·∫øu th√†nh c√¥ng, None n·∫øu tr√πng l·∫∑p
        """
        if self.is_duplicate(content):
            print(f"‚ö†Ô∏è  B√†i vi·∫øt ƒë√£ t·ªìn t·∫°i (duplicate content)")
            return None
        
        cursor = self.conn.cursor()
        content_hash = self.generate_content_hash(content)
        
        try:
            # 1. Insert post ch√≠nh
            cursor.execute('''
                INSERT INTO posts (content_hash, content, original_url)
                VALUES (?, ?, ?)
            ''', (content_hash, content, original_url))
            
            post_id = cursor.lastrowid
            
            # 2. Insert images
            if images:
                for img_url in images:
                    cursor.execute('''
                        INSERT INTO post_images (post_id, image_url)
                        VALUES (?, ?)
                    ''', (post_id, img_url))
            
            # 3. Insert videos
            if videos:
                for vid_url in videos:
                    cursor.execute('''
                        INSERT INTO post_videos (post_id, video_url)
                        VALUES (?, ?)
                    ''', (post_id, vid_url))
            
            # 4. Insert Shopee links
            if shopee_links:
                for link in shopee_links:
                    cursor.execute('''
                        INSERT INTO shopee_links (post_id, original_link)
                        VALUES (?, ?)
                    ''', (post_id, link))
            
            self.conn.commit()
            print(f"‚úÖ ƒê√£ l∆∞u post_id={post_id}")
            return post_id
            
        except sqlite3.IntegrityError as e:
            print(f"‚ùå L·ªói tr√πng l·∫∑p: {e}")
            self.conn.rollback()
            return None
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u database: {e}")
            self.conn.rollback()
            raise
    
    def get_post(self, post_id):
        """L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa 1 post"""
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT * FROM posts WHERE id = ?', (post_id,))
        post = cursor.fetchone()
        
        if not post:
            return None
        
        cursor.execute('SELECT image_url, local_path FROM post_images WHERE post_id = ?', (post_id,))
        images = cursor.fetchall()
        
        cursor.execute('SELECT video_url, local_path FROM post_videos WHERE post_id = ?', (post_id,))
        videos = cursor.fetchall()
        
        cursor.execute('SELECT original_link, affiliate_link FROM shopee_links WHERE post_id = ?', (post_id,))
        shopee_links = cursor.fetchall()
        
        return {
            'id': post[0],
            'content': post[2],
            'original_url': post[3],
            'images': [img[0] for img in images],
            'videos': [vid[0] for vid in videos],
            'shopee_links': [link[0] for link in shopee_links],
            'affiliate_links': [link[1] for link in shopee_links if link[1]],
            'is_posted': post[5]
        }
    
    def get_unposted_posts(self, limit=10):
        """L·∫•y c√°c b√†i ch∆∞a ƒëƒÉng"""
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id FROM posts 
            WHERE is_posted = 0 
            ORDER BY created_at DESC 
            LIMIT ?
        ''', (limit,))
        
        post_ids = [row[0] for row in cursor.fetchall()]
        return [self.get_post(pid) for pid in post_ids]
    
    def mark_as_posted(self, post_id):
        """ƒê√°nh d·∫•u b√†i ƒë√£ ƒëƒÉng"""
        cursor = self.conn.cursor()
        cursor.execute('''
            UPDATE posts 
            SET is_posted = 1, posted_at = ?
            WHERE id = ?
        ''', (datetime.now(), post_id))
        self.conn.commit()
        print(f"‚úÖ ƒê√£ ƒë√°nh d·∫•u post_id={post_id} l√† ƒë√£ ƒëƒÉng")
    
    def update_affiliate_link(self, post_id, original_link, affiliate_link):
        """C·∫≠p nh·∫≠t affiliate link sau khi convert"""
        cursor = self.conn.cursor()
        cursor.execute('''
            UPDATE shopee_links 
            SET affiliate_link = ?
            WHERE post_id = ? AND original_link = ?
        ''', (affiliate_link, post_id, original_link))
        self.conn.commit()
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t affiliate link cho post_id={post_id}")
    
    def get_stats(self):
        """Th·ªëng k√™ database"""
        cursor = self.conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM posts')
        total_posts = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM posts WHERE is_posted = 1')
        posted = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM shopee_links')
        total_links = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM shopee_links WHERE affiliate_link IS NOT NULL')
        converted_links = cursor.fetchone()[0]
        
        return {
            'total_posts': total_posts,
            'posted': posted,
            'unposted': total_posts - posted,
            'total_shopee_links': total_links,
            'converted_links': converted_links
        }
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        if self.conn:
            self.conn.close()
            print("‚úÖ ƒê√£ ƒë√≥ng database")


if __name__ == "__main__":
    print("\n" + "="*60)
    print("üß™ TEST DATABASE")
    print("="*60 + "\n")
    
    db = Database()
    
    # Test 1: Th√™m post
    print("--- Test 1: Th√™m post m·ªõi ---")
    post_id = db.save_post(
        content="√Åo polo nam ƒë·∫πp gi√° r·∫ª üî• Ch·∫•t v·∫£i m·ªÅm m·∫°i, tho√°ng m√°t",
        images=["https://example.com/img1.jpg", "https://example.com/img2.jpg"],
        videos=["https://example.com/video1.mp4"],
        shopee_links=[
            "https://shopee.vn/product1",
            "https://shopee.vn/product2"
        ],
        original_url="https://threads.net/@user/post/123"
    )
    
    # Test 2: Th√™m post tr√πng l·∫∑p
    print("\n--- Test 2: Th√™m post tr√πng l·∫∑p ---")
    duplicate_id = db.save_post(
        content="√Åo polo nam ƒë·∫πp gi√° r·∫ª üî• Ch·∫•t v·∫£i m·ªÅm m·∫°i, tho√°ng m√°t",
        images=["https://different.com/img.jpg"]
    )
    
    # Test 3: L·∫•y th√¥ng tin post
    if post_id:
        print("\n--- Test 3: L·∫•y th√¥ng tin post ---")
        post_data = db.get_post(post_id)
        print(f"Content: {post_data['content']}")
        print(f"Images: {post_data['images']}")
        print(f"Videos: {post_data['videos']}")
        print(f"Shopee links: {post_data['shopee_links']}")
        
        # Test 4: C·∫≠p nh·∫≠t affiliate link
        print("\n--- Test 4: C·∫≠p nh·∫≠t affiliate link ---")
        db.update_affiliate_link(
            post_id,
            "https://shopee.vn/product1",
            "https://shope.ee/affiliate123"
        )
        
        # Test 5: L·∫•y post ch∆∞a ƒëƒÉng
        print("\n--- Test 5: L·∫•y posts ch∆∞a ƒëƒÉng ---")
        unposted = db.get_unposted_posts(limit=5)
        print(f"S·ªë post ch∆∞a ƒëƒÉng: {len(unposted)}")
        
        # Test 6: ƒê√°nh d·∫•u ƒë√£ ƒëƒÉng
        print("\n--- Test 6: ƒê√°nh d·∫•u ƒë√£ ƒëƒÉng ---")
        db.mark_as_posted(post_id)
    
    # Test 7: Th·ªëng k√™
    print("\n--- Test 7: Th·ªëng k√™ database ---")
    stats = db.get_stats()
    for key, value in stats.items():
        print(f"{key}: {value}")
    
    db.close()